// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" 
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id        Int      @id @default(autoincrement())
  auth_uid String   @unique
  email     String   @unique
  password  String?
  name      String?
  images    Image[]
  role      String?  @default("user")
  enabled   Boolean  @default(true)
  address   String?
  orders    Order[]
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  title        String
  description String
  price       Float
  slode       Int              @default(0)
  quantity    Int
  orderItems  ProductOnOrder[]
  cartItems   ProductOnCart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  Category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Order {
  id          Int              @id @default(autoincrement())
  products    ProductOnOrder[]
  cartTotal   Float
  orderStatus String           @default("Not Process")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orderby     User             @relation(fields: [orderbyId], references: [id])
  orderbyId   Int
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model OrderItem {
  id        Int @id @default(autoincrement())
  productId Int
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  images    Image[]
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        Int             @id @default(autoincrement())
  products  ProductOnCart[]
  cartTotal Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  orderBy   User            @relation(fields: [orderById], references: [id])
  orderById Int
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  Cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  Category   Category?@relation(fields: [categoryId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  productId  Int?
  categoryId Int?
}


model Upload {
  id         Int      @id @default(autoincrement())
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}