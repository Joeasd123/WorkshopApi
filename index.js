require('dotenv').config();
const express = require('express');
const app = express();
const morgan = require('morgan');
const http = require('http'); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏• http
const { Server } = require('socket.io'); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Server ‡∏à‡∏≤‡∏Å socket.io
const { readdirSync, existsSync, mkdirSync } = require('fs'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° existsSync, mkdirSync ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
const cors = require('cors');
const multer = require('multer'); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const path = require('path'); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå

// ******** Middleware ********
app.use(morgan('dev')); // Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP requests
app.use(express.json()); // Body parser ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON payloads
app.use(cors()); // CORS header management

// ******** ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ********
// ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PORT ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 3001
const PORT = process.env.PORT || 3001;

console.log('SUPABASE_URL:', process.env.SUPABASE_URL); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)

// ******** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads' ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ********
const UPLOADS_DIR = 'uploads';
if (!existsSync(UPLOADS_DIR)) {
  mkdirSync(UPLOADS_DIR);
  console.log(`‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '${UPLOADS_DIR}' ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß.`);
}

// ******** ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ********
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, UPLOADS_DIR); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads'
  },
  filename: (req, file, cb) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: timestamp-originalfilename.ext
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});
const upload = multer({ storage: storage });

// ******** ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads' ********
// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô URL
app.use('/api/uploads', express.static(UPLOADS_DIR));
console.log(`‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '/${UPLOADS_DIR}' ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ URL '/api/uploads'`);

// ******** ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP Server ‡πÅ‡∏•‡∏∞ Socket.IO Server ********
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*', // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÉ‡∏ä‡πâ '*' ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ Domain ‡∏Ç‡∏≠‡∏á Client ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 'https://your-flutter-app.com')
    methods: ['GET', 'POST'],
    credentials: true // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á cookies/authorization headers
  },
});

// ******** Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á userId ‡∏Å‡∏±‡∏ö socket.id ********
// ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Private Chat
const connectedUsers = {}; // Key: userId (‡∏à‡∏≤‡∏Å Flutter), Value: socket.id (‡∏Ç‡∏≠‡∏á Socket.IO)

// ******** Socket.IO Connection Handling ********
io.on('connection', (socket) => {
  console.log(`‚ö° ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: Socket ID = ${socket.id}`);

  // 1. ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå "client_ready" ‡∏à‡∏≤‡∏Å Flutter client
  //    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô userId ‡∏Å‡∏±‡∏ö socket.id ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°
  socket.on('client_ready', (data) => {
    const userId = data.userId;
    if (userId) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null/undefined
      console.log(`Client Ready: userId=${userId}, socket.id=${socket.id}`);
      connectedUsers[userId] = socket.id; // ‡πÄ‡∏Å‡πá‡∏ö socket.id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
      socket.userId = userId; // ‡∏ú‡∏π‡∏Å userId ‡∏Å‡∏±‡∏ö socket object ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ï‡∏≠‡∏ô disconnect
      console.log('Current connected users map:', connectedUsers);
    } else {
      console.warn(`Warning: client_ready event received with no userId. Socket ID: ${socket.id}`);
    }
  });

  // 2. ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå "SendMessage" ‡∏à‡∏≤‡∏Å Flutter client (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
  socket.on('SendMessage', (data) => {
    // data ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô array: [senderId, senderName, receiverId, messageText]
    const [senderId, senderName, receiverId, messageText] = data;

    console.log(`Received text message: From ${senderId} to ${receiverId}: "${messageText}"`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    socket.emit('ReceivePrivateMessage', [senderId, senderName, receiverId, messageText]);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (Private Message Logic)
    const receiverSocketId = connectedUsers[receiverId];
    if (receiverSocketId && receiverSocketId !== socket.id) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        io.to(receiverSocketId).emit('ReceivePrivateMessage', [senderId, senderName, receiverId, messageText]);
        console.log(`Text message sent to receiver ${receiverId} (Socket ID: ${receiverSocketId})`);
    } else if (receiverSocketId === socket.id) {
        console.log(`Message is for self, already echoed. Receiver ID: ${receiverId}`);
    } else {
        console.log(`Receiver ${receiverId} is not online or not registered. Message not delivered.`);
        // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
    }
  });

  // 3. ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå "SendImage" ‡∏à‡∏≤‡∏Å Flutter client (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
  socket.on('SendImage', (data) => {
    // data ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô array: [senderId, senderName, receiverId, imageUrl]
    const [senderId, senderName, receiverId, imageUrl] = data;

    console.log(`Received image URL: From ${senderId} to ${receiverId}: "${imageUrl}"`);

    // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    socket.emit('ReceivePrivateImage', [senderId, senderName, receiverId, imageUrl]);

    // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (Private Message Logic)
    const receiverSocketId = connectedUsers[receiverId];
    if (receiverSocketId && receiverSocketId !== socket.id) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        io.to(receiverSocketId).emit('ReceivePrivateImage', [senderId, senderName, receiverId, imageUrl]);
        console.log(`Image sent to receiver ${receiverId} (Socket ID: ${receiverSocketId})`);
    } else if (receiverSocketId === socket.id) {
        console.log(`Image is for self, already echoed. Receiver ID: ${receiverId}`);
    } else {
        console.log(`Receiver ${receiverId} is not online or not registered. Image not delivered.`);
    }
  });

  // 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (Disconnect)
  socket.on('disconnect', () => {
    console.log(`üî• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: Socket ID = ${socket.id}`);
    // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Map connectedUsers
    if (socket.userId && connectedUsers[socket.userId] === socket.id) {
        delete connectedUsers[socket.userId];
        console.log(`User ${socket.userId} (Socket ID: ${socket.id}) removed from connectedUsers.`);
    }
    console.log('Current connected users map after disconnect:', connectedUsers);
  });
});

// ******** API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ********
// 'image' ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ field ‡πÉ‡∏ô FormData ‡∏ó‡∏µ‡πà Flutter ‡∏à‡∏∞‡πÉ‡∏ä‡πâ (http.MultipartFile.fromPath('image', imagePath))
app.post('/api/upload', upload.single('image'), (req, res) => {
  if (!req.file) {
    console.error('No file uploaded.');
    return res.status(400).json({ error: 'No file uploaded.' });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ
  // !!! ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 'https://workshopapi-x83c.onrender.com' ‡πÄ‡∏õ‡πá‡∏ô Domain ‡∏Ç‡∏≠‡∏á Render App ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏£‡∏¥‡∏á‡πÜ
  // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ req.protocol + '://' + req.get('host') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local Development
  const baseUrl = process.env.BASE_URL || `http://localhost:${PORT}`; // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î BASE_URL ‡πÉ‡∏ô .env ‡πÑ‡∏î‡πâ
  const imageUrl = `${baseUrl}/api/uploads/${req.file.filename}`;

  console.log(`File uploaded: ${req.file.filename}, accessible at: ${imageUrl}`);
  res.json({ imageUrl: imageUrl });
});


// ******** Auto-import API Routes (Express) ********
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'routes' ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå route ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà
readdirSync('./routes').map((item) => {
  console.log('üì¶ loading route:', item);
  app.use('/api', require('./routes/' + item));
});

// ******** Root Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ********
app.get('/', (req, res) => {
  res.send('API ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Socket.IO ‡πÅ‡∏•‡∏∞ File Upload!');
});

// ******** ‡πÄ‡∏£‡∏¥‡πà‡∏° Server (‡πÉ‡∏ä‡πâ server.listen ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!) ********
server.listen(PORT, () => {
  console.log(`‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`);
  console.log(`üöÄ Socket.IO ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß`);
  console.log(`üìÇ Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: POST /api/upload`);
  console.log(`üñºÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: /api/uploads/:filename`);
});

// ******** ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î app.listen(PORT, ...) ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ********
// ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å listen ‡∏™‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î Error: EADDRINUSE